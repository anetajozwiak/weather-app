{"version":3,"sources":["App.js","serviceWorker.js","index.js","image/snow.jpg","image/rain.jpg","image/sun.jpg","image/mist.jpg","image/cl.jpg","image/cloud.jpg"],"names":["APIKey","apiDay","Form","className","onSubmit","this","props","submit","type","value","placeholder","onChange","change","Component","Result","dateBuilderTime","t","hour","getHours","minut","getMinutes","second","getSeconds","toDateString","toLocaleDateString","toLocaleString","toString","Calender","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","weather","city","sunrise","sunset","temp","pressure","wind","cloud","visibility","humidity","feel","main","err","content","content2","sunriseTime","Date","toLocaleTimeString","sunsetTime","app","document","querySelector","style","backgroundImage","Rain","Clear","Snow","Mist","Clouds","Cloud","App","state","latitude","longitude","day1","day2","day3","day4","day5","temp1","temp2","temp3","temp4","temp5","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","sys","speed","clouds","all","feels_like","catch","console","log","prevState","APIDay","list","dt_txt","weatherDay","ResultDay","temFix1","toFixed","temFix2","temFix3","temFix4","temFix5","labels","datasets","label","backgroundColor","borderColor","borderWidth","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.89c11d50.chunk.js","sourcesContent":["import React from 'react';\n// import './scss/main.scss';\nimport { Component } from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport Rain from './image/rain.jpg';\nimport Clear from './image/sun.jpg';\nimport Snow from './image/snow.jpg';\nimport Mist from './image/mist.jpg';\nimport Clouds from './image/cl.jpg';\nimport Cloud from './image/cloud.jpg';\n\n//Klucz do API - pogoda na dzisiaj\nconst APIKey = 'c17ed5bdc28b8f728c431b00dbd45bfa';\nconst apiDay = \"bb5f6e757d923edbbe90f2c818ac0ac3\";\n\nclass Form extends Component {\n    render() {\n        return (\n            <>\n            <div className={\"search-box\"}>\n                <div className={\"search\"}>\n                <h1 className={\"formH1\"}>Weather Up</h1>\n                <form onSubmit={this.props.submit}>\n                    <input className={\"search-bar\"}\n                    type=\"text\" \n                    value={this.props.value}\n                    placeholder=\"Search...\"\n                    onChange={this.props.change}\n                    />\n                    <button className={\"formBtn\"}>Search</button>\n                </form> \n                </div>\n            </div>\n            </>\n        )\n    }\n}\n\nclass Result extends Component {\n    //Formatujemy zegar\n    dateBuilderTime = (t) => {\n        let hour = t.getHours();\n        let minut = t.getMinutes();\n        let second = t.getSeconds();\n\n        t.toDateString();\n        t.toLocaleDateString();\n        t.toLocaleString();\n        t.toString();\n\n        if (minut < 10) minut = \"0\" + minut;\n        if (second < 10) second = \"0\" + second;\n        if (hour < 10) hour = \"0\" + hour;\n\n        return `${hour} : ${minut} : ${second}`\n    }\n\n    //Tworzymy datę\n    Calender = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        \n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n\n        return `${day}, ${date} ${month} ${year}  `\n    }\n        render() {\n        const {city, sunrise, sunset, temp, pressure, wind, cloud, visibility, humidity, feel, main, err} = this.props.weather;\n        let content = null;\n        let content2 = null;\n        //Jeśli nie będzie błędu utworzony zostanie widok z pogodą\n        if(!err && city) {\n           //Przetwarzamy wartości\n            const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n            const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n            content = (\n                <>\n                <div className={\"resultDiv\"}>\n\n                    <div className={'resultIcon'}>\n                        <h4 className={\"resultH4\"}>Real feel {feel}</h4>\n                        <div className={\"feelImg\"}></div>\n\n                        <h4 className={\"resultH4\"}>Humidity {humidity} %</h4>\n                        <div className={\"humidityImg\"}></div>\n\n                        <h4 className={\"resultH4\"}>Clouds {cloud} %</h4>\n                        <div className={\"cloudImg\"}></div>\n                        \n                        <h4 className={\"resultH4\"}>Wind {wind} m/s</h4>\n                        <div className={\"windImg\"}></div> \n                    </div>\n\n                    <div className={'resultCity'}>\n                        <div className={\"calender\"}>{this.Calender(new Date())}</div>\n                        <div className= {\"resultDate\"}>{this.dateBuilderTime(new Date())}</div>\n\n                        <h3 className={\"resultCityH3\"}>{city}</h3>\n\n                        <div className={\"divTemp\"}>\n                            <div className={\"resultTempIcon\"}></div>\n                            <h2 className={\"resultTempH2\"}>{temp} &#176;C</h2>\n                        </div> \n\n                        <h3 className={\"mainH3\"}>{main}</h3>\n                    </div>\n\n                    <div className={'resultIcon2'}>\n                        <h4 className={\"resultH4\"}>Pressure {pressure} hPa</h4>\n                        <div className={\"pressureImg\"}></div>\n\n                        <h4 className={\"resultH4\"}>Visibility {visibility} km</h4>\n                        <div className={\"visibilityImg\"}></div>\n\n                        <h4 className={\"resultH4\"}>Sunrise {sunriseTime}</h4> \n                        <div className={\"sunriseImg\"}></div>\n                        \n                        <h4 className={\"resultH4\"}>Sunset {sunsetTime}</h4> \n                        <div className={\"sunsetImg\"}></div>\n                    </div>\n \n                </div>\n                </>\n            )\n            \n            //Zmiana tła przy zmianie opisu pogody\n            const app = document.querySelector(\"#root\");\n     \n            if(main === \"Rain\") {\n                app.style.backgroundImage = `url(${Rain})`;\n            }\n            else if(main === \"Clear\" && temp > -5) {\n                app.style.backgroundImage = `url(${Clear})`;\n            }\n            else if(main === \"Snow\") {\n                app.style.backgroundImage = `url(${Snow})`;\n            }\n            else if(temp < -5) {\n                app.style.backgroundImage = `url(${Snow})`;\n            }\n            else if(main === \"Mist\") {\n                app.style.backgroundImage = `url(${Mist})`;\n            }\n            else if(main === \"Clouds\") {\n                app.style.backgroundImage = `url(${Clouds})`;\n    \n            }else {\n                app.style.backgroundImage = `url(${Cloud})`;\n            }\n        //Jeśli będzie błąd utworzona zostanie informacja \n        }else {\n            content2 = (\n                <div className={\"errors\"}>Is not in the database: {city}</div>\n            )\n           \n        }\n        return (\n            <div className=\"result\">\n            {err ? content2 : content}\n            </div>\n        )\n    }\n}\n\nclass App  extends Component {\n    //Stany początkowe, które będą aktualizowane\n    state = {\n        value: '',\n        date: '',\n        city: '',\n        sunrise: '',\n        sunset: '',\n        temp: '',\n        pressure: '',\n        wind: '',\n        cloud: '',\n        visibility: '',\n        humidity: '',\n        feel: '',\n        main: '',\n        latitude: '',\n        longitude: '',\n        err: false,\n        //day\n            day1: '',\n            day2: '',\n            day3: '',\n            day4: '',\n            day5: '',\n            temp1: '',\n            temp2: '',\n            temp3: '',\n            temp4: '',\n            temp5: ''\n    }\n\n    handleInputChange = e => {\n        this.setState({\n            value: e.target.value\n        })\n    }\n\n    handleCitySubmit = e => {\n        e.preventDefault();\n        //Pobieranie danych z API z aktualną pogodą\n        const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n        \n        //Jeśli dostanie odpowiedź z servera odpowiedź jest pozytywna, jeśli nie to negatywna. Pozytywna odp przekaze obiekt response\n        fetch(API)\n        .then(response => {\n            if(response.ok) { //ok czyli true, jesli blad to false\n                return response\n            }\n            //jesli jest blad to wyłapiemy błąd i zatrzymamay dalsze działanie\n            throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n            //Tworzymy aktualną godzinę\n            const time = new Date().toLocaleTimeString();\n            //Uzywajac wartosci korzystamy z funkcji zwracajacej obiekt. Korzystamy wtedy z aktualnych wartości state\n            this.setState(state => ({\n                err: false,\n                date: time,\n                sunrise: data.sys.sunrise,\n                sunset: data.sys.sunset,\n                temp: data.main.temp,\n                pressure: data.main.pressure,\n                wind: data.wind.speed,\n                cloud: data.clouds.all,\n                visibility: data.visibility,\n                humidity: data.main.humidity,\n                feel: data.main.feels_like,\n                main: data.weather[0].main,\n                city: state.value,\n            }))\n        })\n        //pokazuje informacje o bledzie\n        .catch(err => {\n            console.log(err);\n            this.setState(prevState => ({\n                err: true,\n                city: prevState.value\n            }))\n        }) \n\n        // Pobieranie danych z API z prognozą pogody\n        const APIDay = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.value}&APPID=${apiDay}`;\n        fetch(APIDay)\n        .then(response => {\n            if(response.ok) {\n                return response\n            }\n            throw Error(\"Nie udało się z air\")\n        })\n        .then(response => response.json())\n        .then(data => {\n            console.log(data)\n            this.setState(state => ({\n                err: false,\n                day1: data.list[9].dt_txt,\n                day2: data.list[15].dt_txt,\n                day3: data.list[23].dt_txt,\n                day4: data.list[31].dt_txt,\n                day5: data.list[39].dt_txt,\n                temp1: data.list[7].main.temp,\n                temp2: data.list[15].main.temp,\n                temp3: data.list[23].main.temp,\n                temp4: data.list[31].main.temp,\n                temp5: data.list[39].main.temp,\n                city: state.value,\n            }))\n        })\n        .catch(err => {\n            console.log(err);\n            this.setState(prevState => ({\n                err: true,\n                city: prevState.value\n            }))\n        }) \n\n        \n    }\n    render() {\n        return (\n            <div className={\"header\"}>   \n                <main className={\"main\"}>\n                    <Form \n                        value={this.state.value} \n                        change={this.handleInputChange}\n                        submit={this.handleCitySubmit}\n                    />\n                    <Result weather={this.state}/>\n                </main>\n                \n                <div className={\"sectionSecond\"}>\n                   <div className={\"chartApp\"}>\n                        <ResultDay weatherDay={this.state} />\n                    </div>  \n                </div>\n                   \n            </div>  \n            \n        )\n    }\n}\n\n\nclass ResultDay extends Component {\n    render() {\n        const {city, day1, day2, day3, day4, day5, temp1, temp2, temp3, temp4, temp5, err} = this.props.weatherDay;\n        let content = null;\n        let content2 = null;\n        //Przeliczanie na Celcjusza\n        const tem1 = temp1 - 273.15;\n        const temFix1 = (tem1.toFixed(2));\n        const tem2 = temp2 - 273.15;\n        const temFix2 = (tem2.toFixed(2));\n        const tem3 = temp3 - 273.15;\n        const temFix3 = (tem3.toFixed(2));\n        const tem4 = temp4 - 273.15;\n        const temFix4 = (tem4.toFixed(2));\n        const tem5 = temp5 - 273.15;\n        const temFix5 = (tem5.toFixed(2));\n        if(!err && city) {\n            content = (\n                <>\n                <div className={\"chartLine\"}> \n                        <Line data={{\n                            labels: [`${day1}`, `${day2}`, `${day3}`, `${day4}`, `${day5}`],\n                            datasets: [{\n                            label: 'weather forecast',\n                            data: [`${temFix1}`, `${temFix2}`, `${temFix3}`, `${temFix4}`, `${temFix5}`],\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            \n                            borderWidth: 2\n                            }]\n                        }}/>\n                </div>\n                </>\n            ) \n        }\n        else {\n            content2 = (\n                <div></div>\n            )\n        }\n        return (\n        <div className={\"chartReturn\"}>\n        {err ? content2 : content}\n        </div>\n        )\n    }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/snow.813907df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rain.32f461b5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun.509c6848.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mist.6e6b261c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cl.98030622.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.154ab046.jpg\";"],"sourceRoot":""}